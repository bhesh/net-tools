//! X.509 CRLs

use crate::{
    cert::Certificate,
    error::{Error, Result},
    verify::verify,
};
use der::{asn1::BitString, Encode, Sequence, ValueOrd};
use x509_cert::{crl::TbsCertList, spki::AlgorithmIdentifierOwned};

/// CertificateList
///
/// Similar to x509_cert::crl::CertificateList but has additional cryptographic functionality
#[derive(Clone, Debug, Eq, PartialEq, Sequence, ValueOrd)]
pub struct CertificateList {
    /// TBS Certificate List
    pub tbs_cert_list: TbsCertList,

    /// Signature algorithm identifier.
    pub signature_algorithm: AlgorithmIdentifierOwned,

    /// Signature.
    pub signature: BitString,
}

impl CertificateList {
    /// Verifies the CRL given the CA
    pub fn verify(&self, issuer: &Certificate) -> Result<()> {
        let public_key = issuer.tbs_certificate.subject_public_key_info.to_der()?;
        let msg = self.tbs_cert_list.to_der()?;
        let sig = match self.signature.as_bytes() {
            Some(s) => s,
            None => return Err(Error::InvalidSignature),
        };
        let oid = &self.signature_algorithm.oid;
        Ok(verify(oid, &public_key, &msg, &sig)?)
    }
}

#[cfg(test)]
mod tests {

    use crate::{cert::Certificate, crl::CertificateList, error::Error};
    use der::{Decode, DecodePem};

    const RSA_SHA256: &str = "-----BEGIN CERTIFICATE-----
MIIDEzCCAfugAwIBAgIUZ+evGd94OegJAuRime281jEJh7UwDQYJKoZIhvcNAQEL
BQAwGTEXMBUGA1UEAwwOcnNhMjA0OC1zaGEyNTYwHhcNMjMwNDE0MTUwNzQzWhcN
MjYwNDEzMTUwNzQzWjAZMRcwFQYDVQQDDA5yc2EyMDQ4LXNoYTI1NjCCASIwDQYJ
KoZIhvcNAQEBBQADggEPADCCAQoCggEBAIh6/32L7lnScThXsxnub+ATmL4HRxIl
ad//hlwerxLzXpYKvik8tIMb3gYiy83sU1PNXdCVegoMxi4+Di0deV9CX1VAUFeG
SAZRp5Ib5ZtsfgoyuqEHc4U/WzX6V5XdxJfwP6spI/rUsjBEY2g+ltRWWXQGSr/v
iOiNKwhx1rrXIsqCaFb39zIGYlyi/bpQwwmfkXgIEhkezbDdPWyqRT9XstWElOaV
clxMFoPLmWfPeQJF250c6GxAIZKN5B+qVvGC/THy928+RGZpsriOf0Izkdd2iiF/
kkmcmRAe9TFdEOPgLOHdjhyCC2rVjX65vQkRUeWn+mke1MrtZKePsY8CAwEAAaNT
MFEwHQYDVR0OBBYEFBkcFiSUOy5O4PnQ3lB87P1Uo16jMB8GA1UdIwQYMBaAFBkc
FiSUOy5O4PnQ3lB87P1Uo16jMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
BQADggEBABwMVy/mVaG8Mc9aX15hrnQD3XMD7lvASqeiTtaS16x8GOkemoAjjDih
mQ4hLN7ZnOj/eqaURxizBJd4f8VGxATlOWlDJO7AQbDQxx6jtJVZqhcw/elp/mga
7MZClbBZdKaFWCHNX6Q8hkKYc5AunVz/psyH5B5AQnPDQi3RcrqIccok3OCQNdGJ
SGIqHGE1ztNTTjmgzIyMpV0/fBEvCJfWVVyGP4vn7QN5ofUs/p+giRf1KGcmbRVI
QmOnlIJzMJB81/BUqxmJPApOjFumHc4Vx362V/uCbnwHKlO1m8kgilaOsXzFz+/h
VMhbXUpvpTLfrE9uM/R0W1X0j8YOl78=
-----END CERTIFICATE-----";

    const CRL: &[u8] = &[
        0x30, 0x82, 0x02, 0x00, 0x30, 0x81, 0xe9, 0x02, 0x01, 0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a,
        0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x40, 0x31, 0x0b, 0x30,
        0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1f, 0x30, 0x1d, 0x06,
        0x03, 0x55, 0x04, 0x0a, 0x13, 0x16, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74,
        0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x32, 0x30, 0x31, 0x31, 0x31, 0x10,
        0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x20, 0x43,
        0x41, 0x17, 0x0d, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x30,
        0x5a, 0x17, 0x0d, 0x33, 0x30, 0x31, 0x32, 0x33, 0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x30,
        0x5a, 0x30, 0x44, 0x30, 0x20, 0x02, 0x01, 0x0e, 0x17, 0x0d, 0x31, 0x30, 0x30, 0x31, 0x30,
        0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55,
        0x1d, 0x15, 0x04, 0x03, 0x0a, 0x01, 0x01, 0x30, 0x20, 0x02, 0x01, 0x0f, 0x17, 0x0d, 0x31,
        0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x31, 0x5a, 0x30, 0x0c, 0x30,
        0x0a, 0x06, 0x03, 0x55, 0x1d, 0x15, 0x04, 0x03, 0x0a, 0x01, 0x01, 0xa0, 0x2f, 0x30, 0x2d,
        0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x58, 0x01,
        0x84, 0x24, 0x1b, 0xbc, 0x2b, 0x52, 0x94, 0x4a, 0x3d, 0xa5, 0x10, 0x72, 0x14, 0x51, 0xf5,
        0xaf, 0x3a, 0xc9, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x1d, 0x14, 0x04, 0x03, 0x02, 0x01, 0x01,
        0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
        0x03, 0x82, 0x01, 0x01, 0x00, 0x3d, 0xbc, 0xf3, 0x0b, 0x8a, 0x29, 0xc3, 0xf0, 0x6e, 0xc5,
        0x6a, 0x84, 0xec, 0xbb, 0xc4, 0xf6, 0x8d, 0x4a, 0xd3, 0x8b, 0x53, 0x8b, 0x3c, 0x7c, 0x4a,
        0x9e, 0xb9, 0x41, 0xac, 0x03, 0xff, 0x78, 0x76, 0xbe, 0x55, 0x05, 0x75, 0x1c, 0x97, 0xd8,
        0xe4, 0x68, 0xea, 0xd5, 0xda, 0x4d, 0x83, 0x36, 0x6a, 0x0c, 0x88, 0x10, 0x33, 0x94, 0x07,
        0x3e, 0x6d, 0x1a, 0x4a, 0x03, 0x0d, 0xed, 0x49, 0x6d, 0xc7, 0xe5, 0xf3, 0x6f, 0x14, 0x6c,
        0xc0, 0xb9, 0xf0, 0x81, 0x0a, 0xd9, 0xed, 0xfe, 0xfa, 0x4e, 0x59, 0x32, 0xd4, 0x8f, 0xa3,
        0xcf, 0xbf, 0xe9, 0xdc, 0x01, 0x32, 0x9e, 0xb3, 0x51, 0xef, 0x6b, 0xfa, 0xe1, 0x26, 0x6d,
        0xe3, 0xa5, 0x21, 0xa5, 0x2b, 0x96, 0x04, 0x7a, 0x05, 0xd6, 0xe1, 0x15, 0xb6, 0x08, 0xab,
        0x4d, 0x93, 0x5f, 0x38, 0x46, 0x86, 0x50, 0x94, 0xcd, 0x39, 0xa4, 0xc0, 0xe5, 0x4e, 0x79,
        0xfe, 0x2c, 0x3d, 0x04, 0xa8, 0xc7, 0x37, 0x47, 0xbf, 0x55, 0xde, 0xce, 0x1a, 0x7a, 0xe4,
        0xe6, 0x1e, 0x85, 0xb2, 0x05, 0x8e, 0x89, 0xab, 0x06, 0x9f, 0xaf, 0xed, 0xca, 0x6f, 0x6d,
        0x78, 0x3b, 0x7f, 0x2f, 0x68, 0x65, 0x39, 0xdb, 0x19, 0xb2, 0xf5, 0xf5, 0x28, 0xf7, 0x34,
        0x13, 0x15, 0x07, 0x56, 0x32, 0x48, 0x50, 0x16, 0x13, 0xa2, 0x8a, 0xb2, 0xcb, 0xf0, 0xae,
        0x4f, 0x31, 0x47, 0x95, 0xae, 0x91, 0x61, 0x56, 0x2f, 0x26, 0xe4, 0x45, 0xe6, 0xa6, 0x02,
        0xc5, 0xad, 0x06, 0x4d, 0x92, 0xb7, 0x22, 0x60, 0xad, 0x27, 0x75, 0xdf, 0xb0, 0x67, 0x5f,
        0x2c, 0x42, 0x43, 0x67, 0xb4, 0xf5, 0xef, 0x10, 0x50, 0x1e, 0xe7, 0x0c, 0xbc, 0x85, 0x4b,
        0x9b, 0xab, 0xd8, 0xe3, 0x85, 0x94, 0xcb, 0xb3, 0xea, 0x42, 0x16, 0x49, 0xb2, 0x48, 0x49,
        0x30, 0x4b, 0xe3, 0xd3, 0x56, 0x44,
    ];

    const CA: &[u8] = &[
        0x30, 0x82, 0x03, 0x7c, 0x30, 0x82, 0x02, 0x64, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01,
        0x02, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
        0x00, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55,
        0x53, 0x31, 0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x16, 0x54, 0x65, 0x73,
        0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20,
        0x32, 0x30, 0x31, 0x31, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0c,
        0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x30, 0x1e, 0x17,
        0x0d, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x30, 0x5a, 0x17,
        0x0d, 0x33, 0x30, 0x31, 0x32, 0x33, 0x31, 0x30, 0x38, 0x33, 0x30, 0x30, 0x30, 0x5a, 0x30,
        0x40, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
        0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x16, 0x54, 0x65, 0x73, 0x74, 0x20,
        0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x32, 0x30,
        0x31, 0x31, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x07, 0x47, 0x6f,
        0x6f, 0x64, 0x20, 0x43, 0x41, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
        0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30,
        0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0x90, 0x58, 0x9a, 0x47, 0x62, 0x8d, 0xfb,
        0x5d, 0xf6, 0xfb, 0xa0, 0x94, 0x8f, 0x7b, 0xe5, 0xaf, 0x7d, 0x39, 0x73, 0x20, 0x6d, 0xb5,
        0x59, 0x0e, 0xcc, 0xc8, 0xc6, 0xc6, 0xb4, 0xaf, 0xe6, 0xf2, 0x67, 0xa3, 0x0b, 0x34, 0x7a,
        0x73, 0xe7, 0xff, 0xa4, 0x98, 0x44, 0x1f, 0xf3, 0x9c, 0x0d, 0x23, 0x2c, 0x5e, 0xaf, 0x21,
        0xe6, 0x45, 0xda, 0x04, 0x6a, 0x96, 0x2b, 0xeb, 0xd2, 0xc0, 0x3f, 0xcf, 0xce, 0x9e, 0x4e,
        0x60, 0x6a, 0x6d, 0x5e, 0x61, 0x8f, 0x72, 0xd8, 0x43, 0xb4, 0x0c, 0x25, 0xad, 0xa7, 0xe4,
        0x18, 0xe4, 0xb8, 0x1a, 0xa2, 0x09, 0xf3, 0xe9, 0x3d, 0x5c, 0x62, 0xac, 0xfa, 0xf4, 0x14,
        0x5c, 0x92, 0xac, 0x3a, 0x4e, 0x3b, 0x46, 0xec, 0xc3, 0xe8, 0xf6, 0x6e, 0xa6, 0xae, 0x2c,
        0xd7, 0xac, 0x5a, 0x2d, 0x5a, 0x98, 0x6d, 0x40, 0xb6, 0xe9, 0x47, 0x18, 0xd3, 0xc1, 0xa9,
        0x9e, 0x82, 0xcd, 0x1c, 0x96, 0x52, 0xfc, 0x49, 0x97, 0xc3, 0x56, 0x59, 0xdd, 0xde, 0x18,
        0x66, 0x33, 0x65, 0xa4, 0x8a, 0x56, 0x14, 0xd1, 0xe7, 0x50, 0x69, 0x9d, 0x88, 0x62, 0x97,
        0x50, 0xf5, 0xff, 0xf4, 0x7d, 0x1f, 0x56, 0x32, 0x00, 0x69, 0x0c, 0x23, 0x9c, 0x60, 0x1b,
        0xa6, 0x0c, 0x82, 0xba, 0x65, 0xa0, 0xcc, 0x8c, 0x0f, 0xa5, 0x7f, 0x84, 0x94, 0x53, 0x94,
        0xaf, 0x7c, 0xfb, 0x06, 0x85, 0x67, 0x14, 0xa8, 0x48, 0x5f, 0x37, 0xbe, 0x56, 0x64, 0x06,
        0x49, 0x6c, 0x59, 0xc6, 0xf5, 0x83, 0x50, 0xdf, 0x74, 0x52, 0x5d, 0x2d, 0x2c, 0x4a, 0x4b,
        0x82, 0x4d, 0xce, 0x57, 0x15, 0x01, 0xe1, 0x55, 0x06, 0xb9, 0xfd, 0x79, 0x38, 0x93, 0xa9,
        0x82, 0x8d, 0x71, 0x89, 0xb2, 0x0d, 0x3e, 0x65, 0xad, 0xd7, 0x85, 0x5d, 0x6b, 0x63, 0x7d,
        0xca, 0xb3, 0x4a, 0x96, 0x82, 0x46, 0x64, 0xda, 0x8b, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3,
        0x7c, 0x30, 0x7a, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
        0x14, 0xe4, 0x7d, 0x5f, 0xd1, 0x5c, 0x95, 0x86, 0x08, 0x2c, 0x05, 0xae, 0xbe, 0x75, 0xb6,
        0x65, 0xa7, 0xd9, 0x5d, 0xa8, 0x66, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
        0x04, 0x14, 0x58, 0x01, 0x84, 0x24, 0x1b, 0xbc, 0x2b, 0x52, 0x94, 0x4a, 0x3d, 0xa5, 0x10,
        0x72, 0x14, 0x51, 0xf5, 0xaf, 0x3a, 0xc9, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01,
        0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x17, 0x06, 0x03, 0x55, 0x1d, 0x20,
        0x04, 0x10, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x02,
        0x01, 0x30, 0x01, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05,
        0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
        0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x35, 0x87, 0x97, 0x16, 0xe6,
        0x75, 0x35, 0xcd, 0xc0, 0x12, 0xff, 0x96, 0x5c, 0x21, 0x42, 0xac, 0x27, 0x6b, 0x32, 0xbb,
        0x08, 0x2d, 0x96, 0xb1, 0x70, 0x41, 0xaa, 0x03, 0x4f, 0x5a, 0x3e, 0xe6, 0xb6, 0xf4, 0x3e,
        0x68, 0xb1, 0xbc, 0xff, 0x9d, 0x10, 0x73, 0x64, 0xae, 0x9f, 0xba, 0x36, 0x56, 0x7c, 0x05,
        0xf4, 0x3d, 0x7c, 0x51, 0x47, 0xbc, 0x1a, 0x3d, 0xee, 0x3d, 0x46, 0x07, 0xfa, 0x84, 0x88,
        0xd6, 0xf0, 0xdd, 0xc8, 0xa7, 0x23, 0x98, 0xc6, 0xca, 0x45, 0x4e, 0x2b, 0x93, 0x47, 0xa8,
        0xdd, 0x41, 0xcd, 0x0d, 0x7c, 0x2a, 0x21, 0x57, 0x3d, 0x09, 0x04, 0xbd, 0xb2, 0x6c, 0x95,
        0xfb, 0x1d, 0x47, 0x0b, 0x02, 0xf8, 0x4d, 0x3a, 0xea, 0xf8, 0xb5, 0xcb, 0x2b, 0x1f, 0xea,
        0x56, 0x28, 0xf4, 0x62, 0xa9, 0x3e, 0x50, 0x97, 0xc0, 0xb6, 0xb8, 0x36, 0x8e, 0x76, 0x0a,
        0x5e, 0xc0, 0xae, 0x14, 0xc0, 0x50, 0x42, 0x75, 0x82, 0x1a, 0xbc, 0x1a, 0xd6, 0x0d, 0x53,
        0xa6, 0x14, 0x69, 0xfd, 0x19, 0x98, 0x1e, 0x73, 0x32, 0x9d, 0x81, 0x66, 0x66, 0xb5, 0xed,
        0xcc, 0x5c, 0xfe, 0x53, 0xd5, 0xc4, 0x03, 0xb0, 0xbe, 0x80, 0xfa, 0xb8, 0x92, 0xa0, 0xc8,
        0xfe, 0x25, 0x5f, 0x21, 0x3d, 0x6c, 0xea, 0x50, 0x6d, 0x74, 0x1e, 0x74, 0x96, 0xb0, 0xd5,
        0xc2, 0x5d, 0xa8, 0x61, 0xf0, 0x2f, 0x5b, 0xfe, 0xac, 0x0b, 0x6b, 0x1e, 0xd9, 0x09, 0x5e,
        0x66, 0x27, 0x54, 0x9a, 0xbc, 0xe2, 0x54, 0xd3, 0xf8, 0xa0, 0x47, 0x97, 0x20, 0xda, 0x24,
        0x53, 0xa4, 0xfa, 0xa7, 0xff, 0xc7, 0x33, 0x51, 0x46, 0x41, 0x8c, 0x36, 0x8c, 0xeb, 0xe9,
        0x29, 0xc2, 0xad, 0x58, 0x24, 0x80, 0x9d, 0xe8, 0x04, 0x6e, 0x0b, 0x06, 0x63, 0x30, 0x13,
        0x2a, 0x39, 0x8f, 0x24, 0xf2, 0x74, 0x9e, 0x91, 0xc5, 0xab, 0x33,
    ];

    #[test]
    fn verify_rsa_good() {
        let cert = Certificate::from_der(&CA).expect("error parsing CA");
        let crl = CertificateList::from_der(&CRL).expect("error parsing CRL");
        crl.verify(&cert).expect("error verifying");
    }

    #[test]
    fn verify_rsa_bad() {
        let cert = Certificate::from_pem(&RSA_SHA256).expect("error parsing certificate");
        let crl = CertificateList::from_der(&CRL).expect("error parsing CRL");
        match crl.verify(&cert) {
            Ok(_) => panic!("should not have been good"),
            Err(Error::Verification) => {}
            Err(e) => panic!("{:?}", e),
        }
    }
}
