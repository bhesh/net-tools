//! OCSP
//!
//! The ocsp module features encoders and decoders for the structures defined in
//! [RFC 6960](https://datatracker.ietf.org/doc/html/rfc6960).

mod request;
mod response;

pub use request::{OcspRequest, Request, Signature, TbsRequest};
pub use response::{
    AcceptableResponses, ArchiveCutoff, BasicOcspResponse, CertId, CertStatus, CrlId, KeyHash,
    OcspNoCheck, OcspResponse, OcspResponseStatus, PreferredSignatureAlgorithm,
    PreferredSignatureAlgorithms, ResponderId, ResponseBytes, ResponseData, RevokedInfo,
    ServiceLocator, SingleResponse, UnknownInfo, Version,
};

#[cfg(test)]
mod tests {
    use crate::ocsp::OcspRequest;
    use const_oid::db;
    use der::Decode;

    const REQ_DATA: &[u8] = &[
        0x30, 0x67, 0x30, 0x65, 0x30, 0x3e, 0x30, 0x3c, 0x30, 0x3a, 0x30, 0x09, 0x06, 0x05, 0x2b,
        0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0x57, 0x15, 0xee, 0x48, 0x4b, 0x77, 0xc6,
        0x74, 0x27, 0xb7, 0x66, 0x58, 0x1f, 0xdb, 0x6f, 0xf8, 0x1b, 0xf1, 0x9f, 0xb6, 0x04, 0x14,
        0x58, 0x01, 0x84, 0x24, 0x1b, 0xbc, 0x2b, 0x52, 0x94, 0x4a, 0x3d, 0xa5, 0x10, 0x72, 0x14,
        0x51, 0xf5, 0xaf, 0x3a, 0xc9, 0x02, 0x01, 0x02, 0xa2, 0x23, 0x30, 0x21, 0x30, 0x1f, 0x06,
        0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0x9a,
        0xdf, 0x90, 0x94, 0xb3, 0xfd, 0x9d, 0xf5, 0x7b, 0x7e, 0x79, 0x92, 0x8e, 0x57, 0x97, 0x17,
    ];

    const ISSUER_NAME_HASH: &[u8] = &[
        0x57, 0x15, 0xee, 0x48, 0x4b, 0x77, 0xc6, 0x74, 0x27, 0xb7, 0x66, 0x58, 0x1f, 0xdb, 0x6f,
        0xf8, 0x1b, 0xf1, 0x9f, 0xb6,
    ];

    const ISSUER_KEY_HASH: &[u8] = &[
        0x58, 0x01, 0x84, 0x24, 0x1b, 0xbc, 0x2b, 0x52, 0x94, 0x4a, 0x3d, 0xa5, 0x10, 0x72, 0x14,
        0x51, 0xf5, 0xaf, 0x3a, 0xc9,
    ];

    const NONCE: &[u8] = &[
        0x04, 0x10, 0x9a, 0xdf, 0x90, 0x94, 0xb3, 0xfd, 0x9d, 0xf5, 0x7b, 0x7e, 0x79, 0x92, 0x8e,
        0x57, 0x97, 0x17,
    ];

    #[test]
    fn load_request() {
        let req = OcspRequest::from_der(&REQ_DATA).expect("error loading OCSP request");
        let cert_id = &req.tbs_request.request_list[0].req_cert;
        assert_eq!(&cert_id.issuer_name_hash.as_bytes(), &ISSUER_NAME_HASH);
        assert_eq!(&cert_id.issuer_key_hash.as_bytes(), &ISSUER_KEY_HASH);
        let ext = &req.tbs_request.request_extensions.expect("no extensions")[0];
        assert_eq!(&ext.extn_id, &db::rfc6960::ID_PKIX_OCSP_NONCE);
        assert_eq!(&ext.extn_value.as_bytes(), &NONCE);
    }
}
